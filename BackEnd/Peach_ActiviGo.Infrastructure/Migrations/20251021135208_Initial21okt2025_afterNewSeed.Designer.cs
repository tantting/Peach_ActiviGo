// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Peach_ActiviGo.Infrastructure.Data;

#nullable disable

namespace Peach_ActiviGo.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251021135208_Initial21okt2025_afterNewSeed")]
    partial class Initial21okt2025_afterNewSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Lär dig surfa i havet",
                            ImageUrl = "images/surf.jpg",
                            Name = "Surfkurs",
                            Price = 899m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Avkopplande yoga inomhus",
                            ImageUrl = "images/yoga.jpg",
                            Name = "Yogapass",
                            Price = 299m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Klattra på olika nivåer",
                            ImageUrl = "images/climb.jpg",
                            Name = "Klattring",
                            Price = 499m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Cykla i skog och mark",
                            ImageUrl = "images/mtb.jpg",
                            Name = "Mountainbike",
                            Price = 699m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Paddla i lugnt vatten",
                            ImageUrl = "images/sup.jpg",
                            Name = "Stand Up Paddle",
                            Price = 599m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Intensiv cykelträning inomhus",
                            ImageUrl = "images/spinning.jpg",
                            Name = "Spinning",
                            Price = 249m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Bastuupplevelse med dofter",
                            ImageUrl = "images/sauna.jpg",
                            Name = "Saunagus",
                            Price = 350m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Actionfyllt lagspel utomhus",
                            ImageUrl = "images/paintball.jpg",
                            Name = "Paintball",
                            Price = 550m
                        });
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.ActivityLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ActivityId", "LocationId", "IsIndoor")
                        .IsUnique();

                    b.ToTable("ActivityLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            Capacity = 15,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = false,
                            LocationId = 1,
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 1,
                            Capacity = 12,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = false,
                            LocationId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 2,
                            Capacity = 10,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = true,
                            LocationId = 3,
                            isActive = true
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 2,
                            Capacity = 8,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = true,
                            LocationId = 4,
                            isActive = true
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 3,
                            Capacity = 18,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = false,
                            LocationId = 5,
                            isActive = true
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 4,
                            Capacity = 14,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = false,
                            LocationId = 1,
                            isActive = true
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 5,
                            Capacity = 16,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = false,
                            LocationId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 8,
                            ActivityId = 6,
                            Capacity = 12,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = true,
                            LocationId = 3,
                            isActive = true
                        },
                        new
                        {
                            Id = 9,
                            ActivityId = 7,
                            Capacity = 10,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = true,
                            LocationId = 4,
                            isActive = true
                        },
                        new
                        {
                            Id = 10,
                            ActivityId = 8,
                            Capacity = 20,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            IsIndoor = false,
                            LocationId = 5,
                            isActive = true
                        });
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.ActivitySlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLocationId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<int>("SlotCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLocationId");

                    b.ToTable("ActivitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityLocationId = 1,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 25, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 12,
                            StartTime = new DateTime(2025, 10, 25, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ActivityLocationId = 1,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 25, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 12,
                            StartTime = new DateTime(2025, 10, 25, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ActivityLocationId = 2,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 26, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 10,
                            StartTime = new DateTime(2025, 10, 26, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ActivityLocationId = 2,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 26, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 10,
                            StartTime = new DateTime(2025, 10, 26, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ActivityLocationId = 3,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 27, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 8,
                            StartTime = new DateTime(2025, 10, 27, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ActivityLocationId = 3,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 8,
                            StartTime = new DateTime(2025, 10, 27, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            ActivityLocationId = 4,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 8,
                            StartTime = new DateTime(2025, 10, 28, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            ActivityLocationId = 4,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 28, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 8,
                            StartTime = new DateTime(2025, 10, 28, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            ActivityLocationId = 5,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 29, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 18,
                            StartTime = new DateTime(2025, 10, 29, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            ActivityLocationId = 5,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 29, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 18,
                            StartTime = new DateTime(2025, 10, 29, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            ActivityLocationId = 6,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 14,
                            StartTime = new DateTime(2025, 10, 30, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            ActivityLocationId = 6,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 30, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 14,
                            StartTime = new DateTime(2025, 10, 30, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            ActivityLocationId = 7,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 16,
                            StartTime = new DateTime(2025, 10, 31, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            ActivityLocationId = 7,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 10, 31, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 16,
                            StartTime = new DateTime(2025, 10, 31, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            ActivityLocationId = 8,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 11, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 12,
                            StartTime = new DateTime(2025, 11, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            ActivityLocationId = 8,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 11, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 12,
                            StartTime = new DateTime(2025, 11, 1, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            ActivityLocationId = 9,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 11, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 10,
                            StartTime = new DateTime(2025, 11, 2, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            ActivityLocationId = 9,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 11, 2, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 10,
                            StartTime = new DateTime(2025, 11, 2, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            ActivityLocationId = 10,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 11, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 20,
                            StartTime = new DateTime(2025, 11, 3, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            ActivityLocationId = 10,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            EndTime = new DateTime(2025, 11, 3, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            SlotCapacity = 20,
                            StartTime = new DateTime(2025, 11, 3, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivitySlotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ActivitySlotId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Spännande utomhusaktiviteter",
                            Name = "Äventyr"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Aktiviteter vid havet och sjöar",
                            Name = "Vatten"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Inomhus- och utomhusträning",
                            Name = "Träning"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Description = "Lugna aktiviteter för kropp och själ",
                            Name = "Avkoppling"
                        });
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Varberg centrum",
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Latitude = 57.1056m,
                            Longitude = 12.2508m,
                            Name = "Varberg"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Falkenberg centrum",
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Latitude = 56.9055m,
                            Longitude = 12.4912m,
                            Name = "Falkenberg"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Halmstad centrum",
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Latitude = 56.6745m,
                            Longitude = 12.8570m,
                            Name = "Halmstad"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Veddige centrum",
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Latitude = 57.2297m,
                            Longitude = 12.3836m,
                            Name = "Veddige"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Slöinge centrum",
                            CreatedDate = new DateOnly(2025, 10, 21),
                            Latitude = 56.8358m,
                            Longitude = 12.7135m,
                            Name = "Slöinge"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Activity", b =>
                {
                    b.HasOne("Peach_ActiviGo.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.ActivityLocation", b =>
                {
                    b.HasOne("Peach_ActiviGo.Core.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Peach_ActiviGo.Core.Models.Location", "Location")
                        .WithMany("ActivityLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.ActivitySlot", b =>
                {
                    b.HasOne("Peach_ActiviGo.Core.Models.ActivityLocation", "ActivityLocation")
                        .WithMany()
                        .HasForeignKey("ActivityLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityLocation");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Booking", b =>
                {
                    b.HasOne("Peach_ActiviGo.Core.Models.ActivitySlot", "ActivitySlot")
                        .WithMany()
                        .HasForeignKey("ActivitySlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivitySlot");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Location", b =>
                {
                    b.Navigation("ActivityLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
