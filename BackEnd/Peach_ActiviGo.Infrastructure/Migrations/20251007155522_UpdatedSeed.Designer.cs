// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Peach_ActiviGo.Infrastructure.Data;

#nullable disable

namespace Peach_ActiviGo.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251007155522_UpdatedSeed")]
    partial class UpdatedSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Description = "Racketsport i par",
                            ImageUrl = "/img/padel.jpg",
                            Name = "Padel",
                            Price = 120m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Description = "Inomhus pingis",
                            ImageUrl = "/img/pingis.jpg",
                            Name = "Pingis",
                            Price = 80m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Description = "Inomhusklättring",
                            ImageUrl = "/img/climb.jpg",
                            Name = "Klättring",
                            Price = 150m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Description = "Träning i utegym",
                            ImageUrl = "/img/utegym.jpg",
                            Name = "Utegym",
                            Price = 0m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Description = "Lugn och fokuserad träning",
                            ImageUrl = "/img/yoga.jpg",
                            Name = "Yoga",
                            Price = 100m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Description = "Högintensiv utomhusträning",
                            ImageUrl = "/img/bootcamp.jpg",
                            Name = "Bootcamp",
                            Price = 120m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Description = "Gruppträning löpning",
                            ImageUrl = "/img/run.jpg",
                            Name = "Löpning",
                            Price = 60m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Description = "Kondition och styrka",
                            ImageUrl = "/img/crossfit.jpg",
                            Name = "Crossfit",
                            Price = 140m
                        });
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.ActivityLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ActivityId", "LocationId", "IsIndoor")
                        .IsUnique();

                    b.ToTable("ActivityLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            Capacity = 4,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            IsIndoor = true,
                            LocationId = 1,
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 1,
                            Capacity = 4,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            IsIndoor = false,
                            LocationId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 2,
                            Capacity = 2,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            IsIndoor = true,
                            LocationId = 1,
                            isActive = true
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 3,
                            Capacity = 8,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            IsIndoor = true,
                            LocationId = 1,
                            isActive = true
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 4,
                            Capacity = 10,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            IsIndoor = false,
                            LocationId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 5,
                            Capacity = 12,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            IsIndoor = true,
                            LocationId = 3,
                            isActive = true
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 6,
                            Capacity = 15,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            IsIndoor = false,
                            LocationId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 8,
                            ActivityId = 7,
                            Capacity = 20,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            IsIndoor = false,
                            LocationId = 2,
                            isActive = true
                        });
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.ActivitySlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLocationId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCanselled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLocationId");

                    b.ToTable("ActivitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityLocationId = 1,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 9, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 9, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            ActivityLocationId = 1,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 12, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 12, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            ActivityLocationId = 1,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 15, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 15, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            ActivityLocationId = 2,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 10, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 10, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            ActivityLocationId = 2,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 13, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 13, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            ActivityLocationId = 2,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 16, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 16, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            ActivityLocationId = 3,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 11, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 11, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            ActivityLocationId = 3,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 14, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 14, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            ActivityLocationId = 3,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 17, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 17, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            ActivityLocationId = 4,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 12, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 12, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 11,
                            ActivityLocationId = 4,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 15, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 15, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 12,
                            ActivityLocationId = 4,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 18, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 18, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 13,
                            ActivityLocationId = 5,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 13, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 13, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 14,
                            ActivityLocationId = 5,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 16, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 16, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 15,
                            ActivityLocationId = 5,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 19, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 19, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 16,
                            ActivityLocationId = 6,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 14, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 14, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 17,
                            ActivityLocationId = 6,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 17, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 17, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 18,
                            ActivityLocationId = 6,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 20, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 20, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 19,
                            ActivityLocationId = 7,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 15, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 15, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 20,
                            ActivityLocationId = 7,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 18, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 18, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 21,
                            ActivityLocationId = 7,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 21, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 21, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 22,
                            ActivityLocationId = 8,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 16, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 16, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 23,
                            ActivityLocationId = 8,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 19, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 19, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 24,
                            ActivityLocationId = 8,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            EndTime = new DateTime(2025, 10, 22, 18, 0, 0, 0, DateTimeKind.Local),
                            IsCanselled = false,
                            StartTime = new DateTime(2025, 10, 22, 17, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivitySlotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ActivitySlotId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Name = "Träning"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Name = "Spel"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Name = "Kondition"
                        });
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Huvudgatan 1",
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Latitude = 59.330000m,
                            Longitude = 18.060000m,
                            Name = "Sportcenter X"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Parkvägen 5",
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Latitude = 59.320000m,
                            Longitude = 18.040000m,
                            Name = "Utomhusarenan"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Centrumtorget 2",
                            CreatedDate = new DateOnly(2025, 10, 7),
                            Latitude = 59.340000m,
                            Longitude = 18.050000m,
                            Name = "City Gym"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Activity", b =>
                {
                    b.HasOne("Peach_ActiviGo.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.ActivityLocation", b =>
                {
                    b.HasOne("Peach_ActiviGo.Core.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Peach_ActiviGo.Core.Models.Location", "Location")
                        .WithMany("ActivityLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.ActivitySlot", b =>
                {
                    b.HasOne("Peach_ActiviGo.Core.Models.ActivityLocation", "ActivityLocation")
                        .WithMany()
                        .HasForeignKey("ActivityLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityLocation");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Booking", b =>
                {
                    b.HasOne("Peach_ActiviGo.Core.Models.ActivitySlot", "ActivitySlot")
                        .WithMany()
                        .HasForeignKey("ActivitySlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivitySlot");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Peach_ActiviGo.Core.Models.Location", b =>
                {
                    b.Navigation("ActivityLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
